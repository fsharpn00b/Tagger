<!--Copyright 2014 FSharpN00b.
This file is part of Tagger.

Tagger is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tagger is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Tagger.  If not, see<http://www.gnu.org/licenses/> .

Tagger uses AvalonEdit, which is copyright 2014 AlphaSierraPapa for the SharpDevelop Team under the terms of the MIT License. For more information see www.avalonedit.net.-->
<!--Always rebuild solution when you change XAML.-->
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:tc="clr-namespace:TaggerControls;assembly=TaggerControls"
        xmlns:avalon="clr-namespace:ICSharpCode.AvalonEdit.Editing;assembly=ICSharpCode.AvalonEdit"
        Title="Find in Project Results"
        Width="800" Height="600"
        WindowStartupLocation="CenterScreen"
        >
    <Window.Resources>
<!--Converts the width of the ListView to the width of the TextBlocks inside each ListViewItem.-->
        <tc:BindingWidthConverter x:Key="WidthConverter" />        
<!--
We don't want to apply this style to all TextBlocks, so we give it a key.
For more information see section "Relationship of the TargetType Property and the x:Key Attribute" in:
http://msdn.microsoft.com/en-us/library/ms745683%28v=vs.110%29.aspx
-->
        <Style TargetType="TextBlock" x:Key="TextBlockStyle">
            <Setter Property="TextWrapping" Value="Wrap" />
            <Setter Property="IsEnabled" Value="False" />
<!--Bind the Width property of each TextBlock to the ActualWidth of the ListView, using a converter to subtract the width of the scroll bars.-->
            <Setter Property="Width" Value="{Binding ActualWidth, ElementName=Lines, Converter={StaticResource WidthConverter}}" />
        </Style>
        <Style TargetType="ListViewItem">
            <Style.Triggers>
<!--Make the ListView look like a ContextMenu. When the user mouses over an ListViewItem, highlight it as if it had been selected.-->
                <Trigger Property="IsMouseOver" Value="true">
<!--System colors are listed here:
http://msdn.microsoft.com/en-us/library/system.windows.systemcolors%28v=vs.110%29.aspx
-->
                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
<!--See:
http://www.wpf-tutorial.com/panels/dockpanel/
-->
    <DockPanel>
        <TabControl Name="Tabs" DockPanel.Dock="Top" />
        <DockPanel DockPanel.Dock="Bottom" LastChildFill="False">
            <CheckBox Name="MatchCase" DockPanel.Dock="Left" Margin="5,5,5,5">Match Case</CheckBox>
            <CheckBox Name="MatchWholeWord" DockPanel.Dock="Left" Margin="5,5,5,5">Match Whole Word</CheckBox>
            <Button Name="Copy" DockPanel.Dock="Right" Margin="5,5,5,5">Copy Results</Button>
            <Button Name="Dump" DockPanel.Dock="Right" Margin="5,5,5,5">Dump Results</Button>
        </DockPanel>
<!--We list this last to place it in the center and give it all remaining space.-->
        <ListView Name="Lines" />
    </DockPanel>    
</Window>
